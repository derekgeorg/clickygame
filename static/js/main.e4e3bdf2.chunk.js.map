{"version":3,"sources":["components/LogoCard/LogoCard.js","components/Wrapper/Wrapper.js","components/Jumbotron/Jumbotron.js","components/NavBar/Navbar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["LogoCard","props","react_default","a","createElement","className","alt","name","src","image","key","id","onClick","handleClick","Wrapper","children","Jumbotron","Navbar","Footer","App","state","logos","yourScore","topScore","guessValue","clicked","console","log","shuffled","_this","shuffleCards","setState","score","array","i","length","random","Math","floor","temp","_this2","this","components_Wrapper_Wrapper","NavBar_Navbar","components_Jumbotron_Jumbotron","map","logo","components_LogoCard_LogoCard","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0nBAaeA,SAVE,SAACC,GAAD,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MACjCC,IAAKT,EAAMU,GAAIA,GAAMV,EAAMU,GAC3BC,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMU,WCAhCG,SALC,SAAAb,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdJ,EAAMc,YCKQC,SAPG,SAACf,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+ECaOY,SAhBA,SAAChB,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACPH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBAGAF,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,QAAMO,GAAG,gBAEvBT,EAAAC,EAAAC,cAAA,oBACSF,EAAAC,EAAAC,cAAA,QAAMO,GAAG,cADlB,iBACmDT,EAAAC,EAAAC,cAAA,QAAMO,GAAG,kBCF3DO,SARA,kBACXhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,gBACiBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAI,QAAQE,IAAI,6BCkErDW,6MA7DbC,MAAQ,CACNC,QACAC,UAAW,EACXC,SAAU,EACVC,WAAY,MAOdC,QAAU,SAACd,GACTe,QAAQC,IAAIhB,GACZ,IAAMiB,EAAWC,EAAKC,aAAaD,EAAKT,MAAMC,OAC9CQ,EAAKE,SAAS,CAAEC,MAAOH,EAAKT,MAAME,UAAY,EAAGD,MAAOO,OAQ1DE,aAAe,SAAAG,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAME,EAASC,KAAKC,MAAMD,KAAKD,SAAWH,EAAME,QAC5CI,EAAON,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAUG,EAElB,OAAON,2EAMA,IAAAO,EAAAC,KACP,OAEEvC,EAAAC,EAAAC,cAACsC,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MAEEH,KAAKrB,MAAMC,MAAMwB,IAAI,SAAAC,GAAI,OACvB5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEpC,GAAImC,EAAKnC,GACTD,IAAKoC,EAAKnC,GACVJ,KAAMuC,EAAKvC,KACXE,MAAOqC,EAAKrC,MACZI,YAAa2B,EAAKf,YAIxBvB,EAAAC,EAAAC,cAAC4C,EAAD,MAdF,YAvCYC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4e3bdf2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst LogoCard = (props) => (\n    <div className=\"card\" >\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} \n        key={props.id} id = {props.id}\n        onClick={() => props.handleClick(props.id)} />\n      </div>\n    </div>\n  );\n\nexport default LogoCard;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => \n<div className=\"container\">\n{props.children} \n</div>\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = (props) => (\n    <div className=\"jumbotron jumbotron-fluid\">\n        <h1 className=\"display-4\">Clicky Game!</h1>\n        <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n    </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nconst Navbar = (props) => (\n    <nav className=\"navbar navbar-dark bg-primary\">\n            <ul>\n              <li>\n                Clicky Game\n          </li>\n              <li>\n                You guessed <span id=\"guessValue\"></span>\n              </li>\n              <li>\n                Score: <span id=\"yourScore\"></span> | Top Score: <span id=\"topScore\"></span>\n              </li>\n            </ul>\n          </nav>\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            Clicky Game! <img className=\"footerImg\" alt=\"react\" src=\"assets/img/react.png\"></img>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport logos from \"./logos.json\";\nimport LogoCard from \"./components/LogoCard\"\nimport Wrapper from \"./components/Wrapper\"\nimport Jumbotron from \"./components/Jumbotron\"\nimport Navbar from \"./components/NavBar\"\nimport Footer from \"./components/Footer\"\n\n\nclass App extends Component {\n  state = {\n    logos,\n    yourScore: 0,\n    topScore: 0,\n    guessValue: \"\",\n  };\n\n  //Whenever we write a function in ES6, we use the format:\n  // functionName = (paramter or if we don't have a paramter, keep it blank) => { do stuff here}\n  //greatestFunctionEver = () => {this.setState(...)}\n   // scoring function\n  clicked = (id) => {\n    console.log(id)\n    const shuffled = this.shuffleCards(this.state.logos);\n    this.setState({ score: this.state.yourScore + 2, logos: shuffled});\n  }\n\n  // check we haven't chosen img id\n  // if/else has been chose endgame or add to score\n  \n  // end of game reset function\n  // (shuffle)\n  shuffleCards = array => {\n    for (let i = 0; i < array.length; i++) {\n      const random = Math.floor(Math.random() * array.length);\n      let temp = array[i];\n      array[i] = array[random];\n      array[random] = temp;\n    }\n    return array;\n  }\n\n  \n \n\n  render() {\n    return (\n\n      <Wrapper>\n        <Navbar></Navbar>\n        <Jumbotron></Jumbotron>\n        {\n          this.state.logos.map(logo => (\n            <LogoCard\n              id={logo.id}\n              key={logo.id}\n              name={logo.name}\n              image={logo.image}\n              handleClick={this.clicked}\n            />\n          ))}\n\n        <Footer></Footer>,\n        </Wrapper>\n\n\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}